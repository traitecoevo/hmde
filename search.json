[{"path":"https://traitecoevo.github.io/hmde/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 hmde authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://traitecoevo.github.io/hmde/articles/constant-growth.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Case study 1: Constant growth with SUSTAIN Trout data","text":"circumstances number observations available per individual limited, average growth rates time may plausible model fit. particular, individuals two size observations, best can done single estimate growth rate based interval. model behaves constant growth, can think average rate change across observation period given f(Y(t),β)=β\\begin{equation}\\tag{3}\\label{eqn_3_const} f(Y(t), \\beta) = \\beta \\end{equation} β\\beta average growth rate. constant growth model corresponds linear sizes time, equivalent linear mixed model size, individual effect fit multiple individuals. Let’s simulate data visualise constant growth function.","code":""},{"path":"https://traitecoevo.github.io/hmde/articles/constant-growth.html","id":"load-dependencies","dir":"Articles","previous_headings":"Overview","what":"Load dependencies","title":"Case study 1: Constant growth with SUSTAIN Trout data","text":"","code":"# remotes::install_github(\"traitecoevo/hmde\") # install.packages(c(\"dplyr\", \"ggplot2\"))  library(hmde) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2)"},{"path":"https://traitecoevo.github.io/hmde/articles/constant-growth.html","id":"visualise-data","dir":"Articles","previous_headings":"Overview","what":"Visualise data","title":"Case study 1: Constant growth with SUSTAIN Trout data","text":"plots demonstrate constant growth function relates sizes time single individual. Feel free play around parameter settings (beta, y_0) see plot changes.   key take-away function plot relationship think “reasonable growth model”. don’t expect constant growth rates realistic, best represent average rate change period. complex models may realistic, case study interested different mechanisms size dependence, use environmental covariates example.","code":"#Simulate data beta <- 2 #Annual growth rate y_0 <- 1 #Starting size time <- c(0,20)  sizes_over_time <- tibble(Y_t = 1 + beta*time, #Linear sizes over time                           t = time) #Plot of growth function constant_growth_function <- ggplot() +   xlim(y_0, max(sizes_over_time$Y_t)) +   ylim(0, beta*2) +   labs(x = \"Y(t)\", y = \"f\", title = \"Constant growth\") +   theme_classic() +   theme(axis.text=element_text(size=16),         axis.title=element_text(size=18,face=\"bold\")) +   geom_function(fun=hmde_model_des(\"constant_single_ind\"),                  args=list(pars = list(beta)),                 colour=\"green4\", linewidth=1,                 xlim=c(y_0, max(sizes_over_time)))  #Sizes over time sizes_over_time <- ggplot(data = sizes_over_time, aes(x=t, y = Y_t)) +   geom_line(colour=\"green4\", linewidth=1) +   xlim(0, max(sizes_over_time$t)) +   ylim(0, max(sizes_over_time$Y_t)*1.05) +   labs(x = \"Time\", y = \"Y(t)\", title = \"Size over time\") +   theme_classic() +   theme(axis.text=element_text(size=16),         axis.title=element_text(size=18,face=\"bold\"))  constant_growth_function sizes_over_time"},{"path":"https://traitecoevo.github.io/hmde/articles/constant-growth.html","id":"sustain-trout-data","dir":"Articles","previous_headings":"","what":"SUSTAIN trout data","title":"Case study 1: Constant growth with SUSTAIN Trout data","text":"example data constant model comes @moe2020_TroutData, publicly available dataset mark-recapture data Salmo trutta Norway. time observations controlled, number observations per individual. result data consists primarily individuals two observations size, constituting single observation growth limits growth functions can fit individuals single parameter model best can fit two sizes. constant growth function Equation appropriate functions hmde, can interpret single growth interval estimate average growth rate gets fit β\\beta. order best reflect survey data took stratified sample individuals grouped number available observations. 25 fish two observations, 15 three, 10 four, total sample size 50. data included hmde initial exploration look distribution observed sizes, growth behaviour, observation intervals. First transform data extract growth increment observation interval information, plot .     growth histograms show ’s number negative growth increments, reasonably extreme, combined short observation periods get extreme estimates growth rates. can investigate needed. constant growth model assumes non-negative growth uses log-normal distribution β\\beta, eliminate increments estimated sizes. consider eliminating negative growth biologically reasonable don’t expect length fish decrease time, even mass width might. Now actually fit model extract estimates. provided trout data already form required hmde_assign_data function don’t need re-naming can pass directly. level sizes time can look distribution estimated sizes, estimated growth increments, annualised growth rates. negative increments gone without actually removing data set.   can also directly compare observed sizes time estimated values. Quantitatively can use statistics R2R^2 calculated (yij,Ŷij)(y_{ij}, \\hat{Y}_{ij}), qualitatively can look plots sizes time. look 5 individuals start joint plot sizes time can get messy fast.  level individuals interested distribution β\\beta estimates, align estimated annualised growth rates ’s precisely represent. also provide easy way produce plot fitted growth functions order see compare observed sizes.   also get estimates population-level hyper-parameters govern distribution β\\beta – μ\\mu σ\\sigma log-normal distribution. calculated context log-transformed parameters easiest way interpret μ\\mu back-transform exponentiation, easily transfer σ\\sigma. CIs output posterior credible intervals taken central 95% quantiles posterior samples. species-level data can say average annual growth rate species estimated 2.4cm/yr, 95% posterior CI (1.83, 3.04). fit constant growth model ’s much can say growth behaviour.","code":"Trout_Size_Data #> # A tibble: 135 × 4 #>    ind_id  time y_obs obs_index #>     <dbl> <dbl> <dbl>     <dbl> #>  1      1  0       52         1 #>  2      1  1.91    60         2 #>  3      1  4.02    70         3 #>  4      1  6.04    80         4 #>  5      2  0       80         1 #>  6      2  1.90    85         2 #>  7      2  3.94    93         3 #>  8      2  5.96    94         4 #>  9      3  0       52         1 #> 10      3  2.03    65         2 #> # ℹ 125 more rows Trout_Size_Data_transformed <- Trout_Size_Data %>%   group_by(ind_id) %>%   mutate(     delta_y_obs = y_obs - lag(y_obs),     obs_interval = time - lag(time),     obs_growth_rate = delta_y_obs/obs_interval   ) %>%   ungroup() histogram_func <- function(data, var, main, xlab, ...){   ggplot2::ggplot(data = data, aes(x = {{var}})) +    geom_histogram(colour = \"black\", fill = \"grey\", ...) +    labs(title = main,        xlab = xlab) +   theme_classic() }  histogram_func(Trout_Size_Data, y_obs,                 \"Observed size distribution\", \"Size (cm)\", binwidth = 5) histogram_func(Trout_Size_Data_transformed, obs_interval,                 \"Observed interval distribution\", \"Time (yr)\", binwidth = 0.55) #> Warning: Removed 50 rows containing non-finite outside the scale range #> (`stat_bin()`). histogram_func(Trout_Size_Data_transformed, delta_y_obs,                 \"Observed growth increments\", \"Growth increment (cm)\", binwidth = 5.5) #> Warning: Removed 50 rows containing non-finite outside the scale range #> (`stat_bin()`). histogram_func(Trout_Size_Data_transformed, obs_growth_rate,                 \"Observed annualised growth rate distribution\", \"Growth rate (cm/yr)\", binwidth = 80) #> Warning: Removed 50 rows containing non-finite outside the scale range #> (`stat_bin()`). hist(Trout_Size_Data$y_obs,       main = \"Observed size distribution\",      xlab = \"Size (cm)\")  hist(Trout_Size_Data_transformed$obs_interval,       main = \"Observation interval distribution\",      xlab = \"Time (yr)\")  hist(Trout_Size_Data_transformed$delta_y_obs,       main = \"Observed growth increments\",      xlab = \"Growth increment (cm)\")  hist(Trout_Size_Data_transformed$obs_growth_rate,       main = \"Observed annualised growth rate distribution\",      xlab = \"Growth rate (cm/yr)\") trout_constant_fit <- hmde_model(\"constant_multi_ind\") |>   hmde_assign_data(data = Trout_Size_Data)  |>   hmde_run(chains = 4, cores = 1, iter = 2000) #>  #> SAMPLING FOR MODEL 'constant_multi_ind' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 4.7e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.47 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.892 seconds (Warm-up) #> Chain 1:                0.471 seconds (Sampling) #> Chain 1:                1.363 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'constant_multi_ind' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 3.5e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.35 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.842 seconds (Warm-up) #> Chain 2:                0.424 seconds (Sampling) #> Chain 2:                1.266 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'constant_multi_ind' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 3e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.3 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.993 seconds (Warm-up) #> Chain 3:                0.439 seconds (Sampling) #> Chain 3:                1.432 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'constant_multi_ind' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 2.9e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.29 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.912 seconds (Warm-up) #> Chain 4:                0.429 seconds (Sampling) #> Chain 4:                1.341 seconds (Total) #> Chain 4:  trout_constant_estimates <- hmde_extract_estimates(model = \"constant_multi_ind\",                                  fit = trout_constant_fit,                                  input_measurement_data = Trout_Size_Data) measurement_data_transformed <- trout_constant_estimates$measurement_data %>%   group_by(ind_id) %>%   mutate(     delta_y_obs = y_obs - lag(y_obs),     obs_interval = time - lag(time),     obs_growth_rate = delta_y_obs/obs_interval,     delta_y_est = y_hat - lag(y_hat),     est_growth_rate = delta_y_est/obs_interval   ) %>%   ungroup()  hist(measurement_data_transformed$y_hat,       main = \"Estimated size distribution\",      xlab = \"Size (cm)\") hist(measurement_data_transformed$delta_y_est,       main = \"Estimated growth increments\",      xlab = \"Growth increment (cm)\") hist(measurement_data_transformed$est_growth_rate,       main = \"Estimated annualised growth rate distribution\",      xlab = \"Growth rate (cm/yr)\") #Quantitative R^2 cor(measurement_data_transformed$y_obs, measurement_data_transformed$y_hat)^2 #> [1] 0.9643358  #Plots of size over time for a sample of 5 individuals sample_ids <- sample(1:nrow(trout_constant_estimates$individual_data), size=5) plot_data <- measurement_data_transformed %>%   filter(ind_id %in% sample_ids)  ggplot(data=plot_data, aes(group = ind_id)) +   geom_point(aes(x = time, y=y_obs, colour = as.factor(ind_id)),               shape = 1) +   geom_line(aes(x = time, y=y_obs, colour = as.factor(ind_id)),              linetype = \"dashed\") +   geom_point(aes(x = time, y=y_hat, colour = as.factor(ind_id)),               shape = 2) +   geom_line(aes(x = time, y=y_hat, colour = as.factor(ind_id)),              linetype = \"solid\") +   labs(x=\"Time (years)\", y=\"Size (cm)\", colour=\"Ind. ID\") +   theme_classic() hist(trout_constant_estimates$individual_data$ind_beta_mean,      main = \"Individual beta parameters\",       xlab = \"beta estimate\") hmde_plot_de_pieces(model = \"constant_multi_ind\",                     individual_data = trout_constant_estimates$individual_data,                     measurement_data = trout_constant_estimates$measurement_data) #Mean of normal distribution trout_constant_estimates$population_data$mean[1] #Raw value #> [1] 0.8831287 print(paste0(\"95% CI for mean log growth: (\",               trout_constant_estimates$population_data$CI_lower[1], \" , \",              trout_constant_estimates$population_data$CI_upper[1], \")\")) #Raw CI #> [1] \"95% CI for mean log growth: (0.611609004722177 , 1.11529701717596)\"  exp(trout_constant_estimates$population_data$mean[1]) #In cm/yr units #> [1] 2.418455 print(paste0(\"95% CI for mean growth in cm/yr: (\",               exp(trout_constant_estimates$population_data$CI_lower[1]), \" , \",              exp(trout_constant_estimates$population_data$CI_upper[1]), \")\")) #> [1] \"95% CI for mean growth in cm/yr: (1.84339504521429 , 3.05047408783971)\"  #Standard deviation of underlying normal distribution trout_constant_estimates$population_data$mean[2] #> [1] 0.6523952 print(paste0(\"95% CI for log growth standard deviation: (\",               trout_constant_estimates$population_data$CI_lower[2], \" , \",              trout_constant_estimates$population_data$CI_upper[2], \")\")) #Raw CI #> [1] \"95% CI for log growth standard deviation: (0.452930954169368 , 0.914662916987112)\""},{"path":"https://traitecoevo.github.io/hmde/articles/hmde.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"hmde","text":"‘hmde’ active development, can install stable, development version ‘hmde’ GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"traitecoevo/hmde\")"},{"path":"https://traitecoevo.github.io/hmde/articles/hmde.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"hmde","text":"treat growth continuous rate change size, fit size-dependent growth functions. repeat survey data requires multiple measurements individuals time can connected size(tj+1)=size(tj)+growth(tj tj+1).\\begin{equation}\\tag{1}\\label{eqn_1} size(t_{j+1}) = size(t_{j}) + growth(\\text{}t_j\\text{ }t_{j+1}). \\end{equation} assume different individuals variation specifics growth function governed function parameters, individuals population function description.","code":""},{"path":"https://traitecoevo.github.io/hmde/articles/hmde.html","id":"notation","dir":"Articles","previous_headings":"Overview","what":"Notation","title":"hmde","text":"notation express true size individual ii time tjt_j Yi(tj)Y_i(t_j), growth function ff, parameter individual ii βi\\beta_i. Equation can expressed Yi(tj+1)=Yi(tj)+∫tjtj+1f(Y(t),βi)dt\\begin{equation}\\tag{2}\\label{eqn_2_longitudinal} Y_i(t_{j+1}) = Y_i(t_j) + \\int_{t_j}^{t_{j+1}} f(Y(t), \\beta_i)\\,dt \\end{equation} integral adds growth intervening time. model use comes specific growth parameters describe. biologically interpretable others. don’t assume see true sizes, instead observed size yij=Yi(tj)+ error.y_{ij} = Y_i(t_j) + \\text{ error}. assumed normally distributed error hmde,proven reasonably robust simulation general size-dependent error model. details see . Due hierarchical structure statistical model, distributions govern behaviour growth parameters. modelling single individual, don’t worry underlying distribution much. multiple individuals distribution hyper-parameters acts population-level feature, βi∼log𝒩(μ,σ)\\beta_i \\sim \\log\\mathcal{N}(\\mu, \\sigma) example, can examine behaviour mean standard deviation population-level features.","code":""},{"path":"https://traitecoevo.github.io/hmde/articles/hmde.html","id":"hmde-supported-growth-functions","dir":"Articles","previous_headings":"","what":"{hmde} supported growth functions","title":"hmde","text":"Constant growth Von Bertalanffy Canham growth function, implementation model growth single multiple individuals.","code":""},{"path":"https://traitecoevo.github.io/hmde/articles/hmde.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"hmde","text":"Broadly, workflow hdme : Wrangle data required format chosen model, Pass data model function runs sampling Stan’s MCMC algorithms. Inspect anaysis returned Stan fit object. demonstrate workflow using case studies uses three growth functions supported hmde. can find website can view R using: case study, discuss growth function chosen context survey process data availability key factor determining functions can used. discuss mathematical statistical theory depth, interest, check vignette ‘hmde Mathematicians’ check methodology paper: .","code":"vignettes(\"constant-growth\") vignettes(\"von-bertalanffy\") vignettes(\"canham\")"},{"path":"https://traitecoevo.github.io/hmde/articles/von-bertalanffy.html","id":"lizard-size-data","dir":"Articles","previous_headings":"","what":"Lizard size data","title":"Case study 2: von Bertalanffy growth with lizard size data","text":"data sourced measured mass snout-vent-length (SVL) delicate skinks – – experimental conditions examine effect temperature development. going use SVL metric size. took simple random sample without replacement 50 individuals least 5 observations . von Bertalanffy model can fit shorter observation lengths, fewer 3 observations advised two growth parameters per individual.","code":""},{"path":"https://traitecoevo.github.io/hmde/articles/von-bertalanffy.html","id":"implementation","dir":"Articles","previous_headings":"","what":"Implementation","title":"Case study 2: von Bertalanffy growth with lizard size data","text":"workflow second example first, change model name data object. , can compare observed sizes time predicted model.     two parameters individual level interested separate distributions, see evidence relationship . can also use individual parameter estimates estimated sizes plot growth function pieces.     hyper-parameter level whole population centre spread parameters log-normal distributions SmaxS_{max} β\\beta. , can look species-level features.","code":"lizard_vb_fit <- hmde_model(\"vb_multi_ind\") |>   hmde_assign_data(data = Lizard_Size_Data)  |>   hmde_run(chains = 4, cores = 1, iter = 2000) #>  #> SAMPLING FOR MODEL 'vb_multi_ind' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000171 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.71 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 24.03 seconds (Warm-up) #> Chain 1:                5.988 seconds (Sampling) #> Chain 1:                30.018 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'vb_multi_ind' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000132 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 1.32 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 7.591 seconds (Warm-up) #> Chain 2:                7.402 seconds (Sampling) #> Chain 2:                14.993 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'vb_multi_ind' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.000131 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 1.31 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 23.282 seconds (Warm-up) #> Chain 3:                3.779 seconds (Sampling) #> Chain 3:                27.061 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'vb_multi_ind' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.000151 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 1.51 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 20.8 seconds (Warm-up) #> Chain 4:                3.843 seconds (Sampling) #> Chain 4:                24.643 seconds (Total) #> Chain 4: #> Warning: There were 120 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: There were 2 chains where the estimated Bayesian Fraction of Missing Information was low. See #> https://mc-stan.org/misc/warnings.html#bfmi-low #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess  lizard_vb_estimates <- hmde_extract_estimates(model = \"vb_multi_ind\",                                  fit = lizard_vb_fit,                                  input_measurement_data = Lizard_Size_Data) measurement_data_transformed <- lizard_vb_estimates$measurement_data %>%   group_by(ind_id) %>%   mutate(     delta_y_obs = y_obs - lag(y_obs),     obs_interval = time - lag(time),     obs_growth_rate = delta_y_obs/obs_interval,     delta_y_est = y_hat - lag(y_hat),     est_growth_rate = delta_y_est/obs_interval   ) %>%   ungroup()  #Distributions of estimated growth and size hist(measurement_data_transformed$y_hat,       main = \"Estimated size distribution\",      xlab = \"Size (cm)\") hist(measurement_data_transformed$delta_y_est,       main = \"Estimated growth increments\",      xlab = \"Growth increment (cm)\") hist(measurement_data_transformed$est_growth_rate,       main = \"Estimated annualised growth rate distribution\",      xlab = \"Growth rate (cm/yr)\") #Quantitative R^2 cor(measurement_data_transformed$y_obs, measurement_data_transformed$y_hat)^2 #> [1] 0.7470669  #Plots of size over time for a sample of 5 individuals sample_ids <- sample(1:nrow(lizard_vb_estimates$individual_data), size=5) plot_data <- measurement_data_transformed %>%   filter(ind_id %in% sample_ids)  ggplot(data=plot_data, aes(group = ind_id)) +   geom_point(aes(x = time, y=y_obs, colour = as.factor(ind_id)),               shape = 1) +   geom_line(aes(x = time, y=y_obs, colour = as.factor(ind_id)),              linetype = \"dashed\") +   geom_point(aes(x = time, y=y_hat, colour = as.factor(ind_id)),               shape = 2) +   geom_line(aes(x = time, y=y_hat, colour = as.factor(ind_id)),              linetype = \"solid\") +   labs(x=\"Time (days)\", y=\"Size (mm)\", colour=\"Ind. ID\") +   theme_classic() #1-dimensional parameter distributions hist(lizard_vb_estimates$individual_data$ind_max_size_mean,      main = \"Individual max size parameters\",       xlab = \"Smax estimate\") hist(lizard_vb_estimates$individual_data$ind_growth_rate_mean,      main = \"Individual growth rate parameters\",       xlab = \"beta estimate\") #2-dimensional parameter distribution ggplot(data = lizard_vb_estimates$individual_data,         aes(x = ind_max_size_mean, y = ind_growth_rate_mean)) +   geom_point(shape = 16, size = 1, colour = \"green4\") +   xlab(\"Individual max sizes (mm)\") +   ylab(\"Individual growth rate parameters\") +   theme_classic() #Correlation of parameters cor(lizard_vb_estimates$individual_data$ind_max_size_mean,     lizard_vb_estimates$individual_data$ind_growth_rate_mean) #> [1] 0.4733599  #Plot function pieces over estimated sizes. hmde_plot_de_pieces(model = \"vb_multi_ind\",                     individual_data = lizard_vb_estimates$individual_data,                     measurement_data = lizard_vb_estimates$measurement_data) #Max size lizard_vb_estimates$population_data$mean[1] #Raw value #> [1] 3.198664 print(paste0(\"95% CI for mean log max size: (\",               lizard_vb_estimates$population_data$CI_lower[1], \" , \",              lizard_vb_estimates$population_data$CI_upper[1], \")\")) #Raw CI #> [1] \"95% CI for mean log max size: (3.17906559168809 , 3.21938603555537)\"  exp(lizard_vb_estimates$population_data$mean[1]) #In mm units #> [1] 24.49979 print(paste0(\"95% CI for mean max size in mm: (\",               exp(lizard_vb_estimates$population_data$CI_lower[1]), \" , \",              exp(lizard_vb_estimates$population_data$CI_upper[1]), \")\")) #> [1] \"95% CI for mean max size in mm: (24.0242945602394 , 25.0127585216695)\"  #Standard deviation of underlying normal distribution lizard_vb_estimates$population_data$mean[2] #> [1] 0.03385361 print(paste0(\"95% CI for log max size standard deviation: (\",               lizard_vb_estimates$population_data$CI_lower[2], \" , \",              lizard_vb_estimates$population_data$CI_upper[2], \")\")) #Raw CI #> [1] \"95% CI for log max size standard deviation: (0.0193396389437248 , 0.049790035571581)\"  #Beta lizard_vb_estimates$population_data$mean[3] #Raw value #> [1] -4.000668 print(paste0(\"95% CI for mean log growth par: (\",               lizard_vb_estimates$population_data$CI_lower[3], \" , \",              lizard_vb_estimates$population_data$CI_upper[3], \")\")) #Raw CI #> [1] \"95% CI for mean log growth par: (-4.19076174579693 , -3.80345960817351)\"  exp(lizard_vb_estimates$population_data$mean[3]) #In cm/yr units #> [1] 0.0183034 print(paste0(\"95% CI for mean growth par mm/yr: (\",               exp(lizard_vb_estimates$population_data$CI_lower[3]), \" , \",              exp(lizard_vb_estimates$population_data$CI_upper[3]), \")\")) #> [1] \"95% CI for mean growth par mm/yr: (0.0151347516474566 , 0.0222935114733902)\"  #Standard deviation of underlying normal distribution lizard_vb_estimates$population_data$mean[4] #> [1] 0.1122711 print(paste0(\"95% CI for log growth par standard deviation: (\",               lizard_vb_estimates$population_data$CI_lower[4], \" , \",              lizard_vb_estimates$population_data$CI_upper[4], \")\")) #Raw CI #> [1] \"95% CI for log growth par standard deviation: (0.038047243081422 , 0.259142006998395)\""},{"path":"https://traitecoevo.github.io/hmde/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Falster. Author, contributor. Tess O'Brien. Author, maintainer, copyright holder. Fonti Kar. Contributor. David Warton. Author, contributor.","code":""},{"path":"https://traitecoevo.github.io/hmde/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Falster D, O'Brien T, Warton D (2024). hmde: Hierarchical Methods Differential Equations. R package version 0.1.0, https://traitecoevo.github.io/hmde/.","code":"@Manual{,   title = {hmde: Hierarchical Methods for Differential Equations},   author = {Daniel Falster and Tess O'Brien and David Warton},   year = {2024},   note = {R package version 0.1.0},   url = {https://traitecoevo.github.io/hmde/}, }"},{"path":"https://traitecoevo.github.io/hmde/index.html","id":"hmde-","dir":"","previous_headings":"","what":"Hierarchical Methods for Differential Equations","title":"Hierarchical Methods for Differential Equations","text":"goal hmde implement hierarchical Bayesian longitudinal models solve Bayesian inverse problem estimating differential equation parameters based repeat measurement surveys. Estimation done using Markov Chain Monte Carlo, implemented Stan via RStan, built R 4.3.3. inbuilt models based case studies ecology. hierarchical Bayesian longitudinal method first introduced O’Brien et al., 2024. hmde first intended biologists, initial set vignettes (hmde, constant-growth, von-bertalanffy, canham) written aimed audience interested applications underlying theory. vignette mathematically interested development.","code":""},{"path":"https://traitecoevo.github.io/hmde/index.html","id":"the-maths","dir":"","previous_headings":"","what":"The Maths","title":"Hierarchical Methods for Differential Equations","text":"general use case estimate vector parameters 𝛉\\boldsymbol{\\theta} chosen differential equation f(Y(t),𝛉)=dYdtf\\left( Y \\left( t \\right), \\boldsymbol{\\theta} \\right) = \\frac{dY}{dt} based longitudinal structure Y(tj+1)=Y(tj)+∫tjtj+1f(Y(t),𝛉)dt.Y \\left( t_{j+1} \\right) = Y\\left( t_j \\right) + \\int_{t_j}^{t_{j+1}}f\\left( Y \\left( t \\right), \\boldsymbol{\\theta} \\right)\\,dt. input data observations form yijy_{ij} individual ii time tjt_j, repeated observations coming individual. parameterise ff individual level estimating 𝛉i\\boldsymbol{\\theta}_i vector parameters. hyper-parameters determine distribution 𝛉i\\boldsymbol{\\theta}_i typical prior distribution 𝛉i∼log𝒩(𝛍log(𝛉),𝛔log(𝛉)),\\boldsymbol{\\theta}_i \\sim \\log \\mathcal{N}\\left(\\boldsymbol{\\mu}_{\\log\\left(\\boldsymbol{\\theta}\\right)}, \\boldsymbol{\\sigma}_{\\log \\left( \\boldsymbol{\\theta} \\right)}\\right),  𝛍log(𝛉)\\boldsymbol{\\mu}_{\\log\\left(\\boldsymbol{\\theta}\\right)} 𝛔log(𝛉)\\boldsymbol{\\sigma}_{\\log\\left(\\boldsymbol{\\theta}\\right)} vectors means standard deviations. case single individual, chosen prior values. case multi-individual model 𝛍log(𝛉)\\boldsymbol{\\mu}_{\\log\\left(\\boldsymbol{\\theta}\\right)} 𝛔log(𝛉)\\boldsymbol{\\sigma}_{\\log\\left(\\boldsymbol{\\theta}\\right)} prior distributions fit data.","code":""},{"path":"https://traitecoevo.github.io/hmde/index.html","id":"implemented-models","dir":"","previous_headings":"","what":"Implemented Models","title":"Hierarchical Methods for Differential Equations","text":"hmde comes four DEs built ready go, version single individual multiple individuals.","code":""},{"path":"https://traitecoevo.github.io/hmde/index.html","id":"constant-model","dir":"","previous_headings":"Implemented Models","what":"Constant Model","title":"Hierarchical Methods for Differential Equations","text":"constant model given f(Y(t),β)=dYdt=β,f \\left( Y \\left( t \\right), \\beta \\right) = \\frac{dY}{dt} = \\beta, best understood describing average rate change time.","code":""},{"path":"https://traitecoevo.github.io/hmde/index.html","id":"von-bertalanffy","dir":"","previous_headings":"Implemented Models","what":"von Bertalanffy","title":"Hierarchical Methods for Differential Equations","text":"von Bertalanffy mode given f(Y(t),β,Ymax)=dYdt=β(Ymax−Y(t)),f \\left( Y \\left( t \\right), \\beta, Y_{max} \\right) = \\frac{dY}{dt} = \\beta \\left( Y_{max} - Y \\left( t \\right) \\right), β\\beta growth rate parameter YmaxY_{max} maximum value YY takes.","code":""},{"path":"https://traitecoevo.github.io/hmde/index.html","id":"canham","dir":"","previous_headings":"Implemented Models","what":"Canham","title":"Hierarchical Methods for Differential Equations","text":"Canham (Canham et al. 2004) model hump-shaped function given f(Y(t),fmax,Ymax,k)=dYdt=fmaxexp(−12(ln(Y(t)/Ymax)k)2),f \\left( Y \\left( t \\right), f_{max}, Y_{max}, k \\right) = \\frac{dY}{dt} = f_{max} \\exp \\Bigg( -\\frac{1}{2} \\bigg( \\frac{ \\ln \\left( Y \\left( t \\right) / Y_{max} \\right) }{k} \\bigg)^2 \\Bigg),  fmaxf_{max} maximum growth rate, YmaxY_{max} YY-value maximum occurs, kk controls narrow wide peak .","code":""},{"path":[]},{"path":"https://traitecoevo.github.io/hmde/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Hierarchical Methods for Differential Equations","text":"‘hmde’ active development. can install current developmental version ‘hmde’ GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"traitecoevo/hmde\")"},{"path":"https://traitecoevo.github.io/hmde/index.html","id":"quick-demo","dir":"","previous_headings":"","what":"Quick demo","title":"Hierarchical Methods for Differential Equations","text":"Create constant growth data measurement error: Measurement error necessary otherwise normal likelihood sij∼𝒩(0,σe)s_{ij} \\sim \\mathcal{N}\\left( 0, \\sigma_e \\right) blows σe\\sigma_e approaches 0. Fit model:","code":"library(hmde) y_obs <- seq(from=2, to=15, length.out=10) + rnorm(10, 0, 0.1) constant_fit <- hmde_model(\"constant_single_ind\") |>         hmde_assign_data(n_obs = 10,                  #Integer                          y_obs = y_obs,               #vector length n_obs                          obs_index = 1:10,            #vector length n_obs                          time = 0:9,                  #Vector length n_obs                          y_0_obs = y_obs[1]           #Real         ) |>         hmde_run(chains = 1, iter = 1000, verbose = FALSE, show_messages = FALSE)"},{"path":"https://traitecoevo.github.io/hmde/index.html","id":"found-a-bug","dir":"","previous_headings":"","what":"Found a bug?","title":"Hierarchical Methods for Differential Equations","text":"Please submit GitHub issue details bug. reprex particularly helpful bug-proofing process!","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/Lizard_Size_Data.html","id":null,"dir":"Reference","previous_headings":"","what":"Skink size data - Lampropholis delicata — Lizard_Size_Data","title":"Skink size data - Lampropholis delicata — Lizard_Size_Data","text":"subset data Kar, Nakagawa, Noble (2024), used model growth behaviour skink species. Observations length tip nose start cloaca. Data prepared taking simple random sample replacement 50 individual IDs among individuals least 5 observations . Data transformed conform needs model data set package.","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/Lizard_Size_Data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skink size data - Lampropholis delicata — Lizard_Size_Data","text":"","code":"Lizard_Size_Data"},{"path":[]},{"path":"https://traitecoevo.github.io/hmde/reference/Lizard_Size_Data.html","id":"lizard-size-data","dir":"Reference","previous_headings":"","what":"Lizard_Size_Data","title":"Skink size data - Lampropholis delicata — Lizard_Size_Data","text":"data frame 336 rows 4 columns: ind_id ID number individual time Days since first observation. y_obs Individual size mm. obs_index Index observations individual","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/Lizard_Size_Data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Skink size data - Lampropholis delicata — Lizard_Size_Data","text":"https://osf.io/hjkxd/","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/Tree_Size_Data.html","id":null,"dir":"Reference","previous_headings":"","what":"Garcinia recondita - Barro Colorado Island data — Tree_Size_Data","title":"Garcinia recondita - Barro Colorado Island data — Tree_Size_Data","text":"subset data Barro Colorado Island long term forest plot managed Smithsonian Tropical Research Institute (Condit et al. 2019). Data prepared taking simple random sample without replacement 30 individual IDs Garcinia recondita. sampling frame restricted individuals 6 observations since 1990, difference observed first last sizes 3cm order avoid identifiability issues. Data transformed renamed match required structure act demonstration package.","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/Tree_Size_Data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Garcinia recondita - Barro Colorado Island data — Tree_Size_Data","text":"","code":"Tree_Size_Data"},{"path":[]},{"path":"https://traitecoevo.github.io/hmde/reference/Tree_Size_Data.html","id":"tree-size-data","dir":"Reference","previous_headings":"","what":"Tree_Size_Data","title":"Garcinia recondita - Barro Colorado Island data — Tree_Size_Data","text":"data frame 300 rows 4 columns: ind_id ID number individual time Years since first observation. y_obs Individual diameter breast height (DBH) centimetres. obs_index Index observations individual","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/Tree_Size_Data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Garcinia recondita - Barro Colorado Island data — Tree_Size_Data","text":"https://doi.org/10.15146/5xcp-0d46","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/Tree_Size_Data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Garcinia recondita - Barro Colorado Island data — Tree_Size_Data","text":"https://doi.org/10.1002/ecy.4140","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/Tree_Size_Ests.html","id":null,"dir":"Reference","previous_headings":"","what":"Garcinia recondita model estimates - Barro Colorado Island data — Tree_Size_Ests","title":"Garcinia recondita model estimates - Barro Colorado Island data — Tree_Size_Ests","text":"Estimated sizes, individual growth parameters, population-level hyper-parameters Garcinia recondita fit Canham growth function hierarchical model. data used fit model Tree_Size_Data object.","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/Tree_Size_Ests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Garcinia recondita model estimates - Barro Colorado Island data — Tree_Size_Ests","text":"","code":"Tree_Size_Ests"},{"path":[]},{"path":"https://traitecoevo.github.io/hmde/reference/Tree_Size_Ests.html","id":"tree-size-ests","dir":"Reference","previous_headings":"","what":"Tree_Size_Ests","title":"Garcinia recondita model estimates - Barro Colorado Island data — Tree_Size_Ests","text":"list 4 elements: measurement_data tibble 5 columns gives information size observations estimates. individual_data tibble 13 columns gives posterior estimates individual growth parameters. error_data tibble 5 columns gives posterior estimates error parameter. population_data tibble 5 columns gives posterior estimates population-level hyper-parameters.","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/Trout_Size_Data.html","id":null,"dir":"Reference","previous_headings":"","what":"SUSTAIN Salmo trutta data — Trout_Size_Data","title":"SUSTAIN Salmo trutta data — Trout_Size_Data","text":"subset data SUSTAIN trout capture-recapture data set Moe et al. (2020). Observations total body length centimetres. Data prepared taking stratified sample individual IDs based number observations per individual: 25 individuals 2 observations, 15 3, 10 4. Within groups simple random sample without replacement used. Data transformed renamed match required structure act demonstration package.","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/Trout_Size_Data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SUSTAIN Salmo trutta data — Trout_Size_Data","text":"","code":"Trout_Size_Data"},{"path":[]},{"path":"https://traitecoevo.github.io/hmde/reference/Trout_Size_Data.html","id":"trout-size-data","dir":"Reference","previous_headings":"","what":"Trout_Size_Data","title":"SUSTAIN Salmo trutta data — Trout_Size_Data","text":"data frame 135 rows 4 columns: ind_id ID number individual time Years since first capture tagging individual. y_obs Individual length centimetres. obs_index Index observations individual","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/Trout_Size_Data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"SUSTAIN Salmo trutta data — Trout_Size_Data","text":"https://doi.org/10.3897/BDJ.8.e52157","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'hmde' package. — hmde-package","title":"The 'hmde' package. — hmde-package","text":"package implement selection hierarchical Bayesian longitudinal models inverse Bayesian problems.","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The 'hmde' package. — hmde-package","text":"Stan Development Team (NA). RStan: R interface Stan. R package version 2.26.23. https://mc-stan.org","code":""},{"path":[]},{"path":"https://traitecoevo.github.io/hmde/reference/hmde-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The 'hmde' package. — hmde-package","text":"Maintainer: Tess O'Brien theresa.obrien@unsw.edu.au (ORCID) [copyright holder] Authors: Daniel Falster daniel.falster@unsw.edu.au (ORCID) [contributor] David Warton david.warton@unsw.edu.au (ORCID) [contributor] contributors: Fonti Kar f.kar@unsw.edu.au (ORCID) [contributor]","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_assign_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign data to template for chosen model — hmde_assign_data","title":"Assign data to template for chosen model — hmde_assign_data","text":"Assign data template chosen model","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_assign_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign data to template for chosen model — hmde_assign_data","text":"","code":"hmde_assign_data(model_template, data = NULL, step_size = NULL, ...)"},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_assign_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign data to template for chosen model — hmde_assign_data","text":"model_template output hmde_model data Input data tibble columns including time, y_obs, obs_index, additionally ind_id multi-individual models step_size Step size numerical integration. ... data-masking name-value pairs allowing specific input elements","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_assign_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign data to template for chosen model — hmde_assign_data","text":"updated named list data assigned Stan model parameters","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_canham_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential equation for Canham growth single and multi- individual models — hmde_canham_de","title":"Differential equation for Canham growth single and multi- individual models — hmde_canham_de","text":"Differential equation Canham growth single multi- individual models","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_canham_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential equation for Canham growth single and multi- individual models — hmde_canham_de","text":"","code":"hmde_canham_de(y = NULL, pars = NULL)"},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_canham_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential equation for Canham growth single and multi- individual models — hmde_canham_de","text":"y input real pars list parametera g_max, S_max, k","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_canham_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential equation for Canham growth single and multi- individual models — hmde_canham_de","text":"value differential equation y","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_const_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential equation for constant growth single and multi- individual models — hmde_const_de","title":"Differential equation for constant growth single and multi- individual models — hmde_const_de","text":"Differential equation constant growth single multi- individual models","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_const_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential equation for constant growth single and multi- individual models — hmde_const_de","text":"","code":"hmde_const_de(y = NULL, pars = NULL)"},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_const_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential equation for constant growth single and multi- individual models — hmde_const_de","text":"y input real pars list parameter beta","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_const_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential equation for constant growth single and multi- individual models — hmde_const_de","text":"value differential equation y","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_extract_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract samples and return measurement, individual, and population-level estimates — hmde_extract_estimates","title":"Extract samples and return measurement, individual, and population-level estimates — hmde_extract_estimates","text":"Extract samples return measurement, individual, population-level estimates","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_extract_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract samples and return measurement, individual, and population-level estimates — hmde_extract_estimates","text":"","code":"hmde_extract_estimates(model = NULL, fit = NULL, input_measurement_data = NULL)"},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_extract_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract samples and return measurement, individual, and population-level estimates — hmde_extract_estimates","text":"model model name character string fit fitted model Stan fit input_measurement_data data used fit model ind_id, y_obs, time, obs_index tibble","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_extract_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract samples and return measurement, individual, and population-level estimates — hmde_extract_estimates","text":"named list data frames measurement, individual, population-level, error parameter estimates","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_linear_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential equation for linear growth single individual model — hmde_linear_de","title":"Differential equation for linear growth single individual model — hmde_linear_de","text":"Differential equation linear growth single individual model","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_linear_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential equation for linear growth single individual model — hmde_linear_de","text":"","code":"hmde_linear_de(y = NULL, pars = NULL)"},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_linear_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential equation for linear growth single individual model — hmde_linear_de","text":"y input real pars list parameters beta_0, beta_1","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_linear_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential equation for linear growth single individual model — hmde_linear_de","text":"value differential equation y","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Select data configuration template for hmde supported model — hmde_model","title":"Select data configuration template for hmde supported model — hmde_model","text":"Select data configuration template hmde supported model","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select data configuration template for hmde supported model — hmde_model","text":"","code":"hmde_model(model = NULL)"},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select data configuration template for hmde supported model — hmde_model","text":"model model name character string","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select data configuration template for hmde supported model — hmde_model","text":"named list matches Stan model parameters","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_model_des.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to select DE given model name — hmde_model_des","title":"Function to select DE given model name — hmde_model_des","text":"Function select DE given model name","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_model_des.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to select DE given model name — hmde_model_des","text":"","code":"hmde_model_des(model = NULL)"},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_model_des.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to select DE given model name — hmde_model_des","text":"model character string model name","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_model_des.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to select DE given model name — hmde_model_des","text":"DE function corresponding specific model","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_model_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns names of available models. — hmde_model_name","title":"Returns names of available models. — hmde_model_name","text":"Returns names available models.","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_model_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns names of available models. — hmde_model_name","text":"","code":"hmde_model_name()"},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_model_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns names of available models. — hmde_model_name","text":"vector character strings model names.","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_model_pars.html","id":null,"dir":"Reference","previous_headings":"","what":"Show parameter list for hmde supported model — hmde_model_pars","title":"Show parameter list for hmde supported model — hmde_model_pars","text":"Show parameter list hmde supported model","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_model_pars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show parameter list for hmde supported model — hmde_model_pars","text":"","code":"hmde_model_pars(model = NULL)"},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_model_pars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show parameter list for hmde supported model — hmde_model_pars","text":"model model name character string","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_model_pars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show parameter list for hmde supported model — hmde_model_pars","text":"named list matches Stan model parameters","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_plot_de_pieces.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot pieces of chosen differential equation model for each individual. Structured to take the individual data tibble that is built by the hmde_extract_estimates function using the ind_par_name_mean estimates. Function piece will go from the first fitted size to the last. Accepted ggplot arguments will change the axis labels, title, line colour, alpha — hmde_plot_de_pieces","title":"Plot pieces of chosen differential equation model for each individual. Structured to take the individual data tibble that is built by the hmde_extract_estimates function using the ind_par_name_mean estimates. Function piece will go from the first fitted size to the last. Accepted ggplot arguments will change the axis labels, title, line colour, alpha — hmde_plot_de_pieces","text":"Plot pieces chosen differential equation model individual. Structured take individual data tibble built hmde_extract_estimates function using ind_par_name_mean estimates. Function piece go first fitted size last. Accepted ggplot arguments change axis labels, title, line colour, alpha","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_plot_de_pieces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot pieces of chosen differential equation model for each individual. Structured to take the individual data tibble that is built by the hmde_extract_estimates function using the ind_par_name_mean estimates. Function piece will go from the first fitted size to the last. Accepted ggplot arguments will change the axis labels, title, line colour, alpha — hmde_plot_de_pieces","text":"","code":"hmde_plot_de_pieces(   model = NULL,   individual_data = NULL,   measurement_data = NULL,   xlab = \"Y(t)\",   ylab = \"f\",   title = NULL,   colour = \"#006600\",   alpha = 0.4 )"},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_plot_de_pieces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot pieces of chosen differential equation model for each individual. Structured to take the individual data tibble that is built by the hmde_extract_estimates function using the ind_par_name_mean estimates. Function piece will go from the first fitted size to the last. Accepted ggplot arguments will change the axis labels, title, line colour, alpha — hmde_plot_de_pieces","text":"model model name character string individual_data tibble estimated DE parameters measurement_data tibble estimated measurements xlab character string replacement x axis label ylab character string replacement y axis label title character string replacement plot title colour character string replacement line colour alpha real number replacement alpha value","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_plot_de_pieces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot pieces of chosen differential equation model for each individual. Structured to take the individual data tibble that is built by the hmde_extract_estimates function using the ind_par_name_mean estimates. Function piece will go from the first fitted size to the last. Accepted ggplot arguments will change the axis labels, title, line colour, alpha — hmde_plot_de_pieces","text":"ggplot object","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run chosen pre-built model in Stan — hmde_run","title":"Run chosen pre-built model in Stan — hmde_run","text":"Run chosen pre-built model Stan","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run chosen pre-built model in Stan — hmde_run","text":"","code":"hmde_run(model_template, ...)"},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run chosen pre-built model in Stan — hmde_run","text":"model_template model template generated hmde_model updated hmde_assign_data ... additional arguments passed rstan::sampling","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run chosen pre-built model in Stan — hmde_run","text":"Stanfit model output","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_vb_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential equation for von Bertalanffy growth single and multi- individual models — hmde_vb_de","title":"Differential equation for von Bertalanffy growth single and multi- individual models — hmde_vb_de","text":"Differential equation von Bertalanffy growth single multi- individual models","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_vb_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential equation for von Bertalanffy growth single and multi- individual models — hmde_vb_de","text":"","code":"hmde_vb_de(y = NULL, pars = NULL)"},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_vb_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential equation for von Bertalanffy growth single and multi- individual models — hmde_vb_de","text":"y input real pars list parameteters Y_max, growth_rate","code":""},{"path":"https://traitecoevo.github.io/hmde/reference/hmde_vb_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential equation for von Bertalanffy growth single and multi- individual models — hmde_vb_de","text":"value differential equation y","code":""}]
